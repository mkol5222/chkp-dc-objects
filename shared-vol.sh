#!/bin/bash

# SA to obtain pods
kubectl create serviceaccount cp-api-explorer

kubectl create clusterrole ns-reader --verb=get,list,watch --resource=namespaces,pods
kubectl create clusterrolebinding ns-reader --clusterrole ns-reader --serviceaccount default:cp-api-explorer

# RO access to pods in default ns
cat <<EOF | kubectl apply -f -
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: pod-reader
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["pods"]
  verbs: ["get", "watch", "list"]
EOF

# bind role to SA
# kubectl create rolebinding api-explorer:pod-reader --role pod-reader --serviceaccount default:cp-api-explorer

# if needed to recreate
kubectl delete pod two-containers

cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Pod
metadata:
  name: two-containers
  labels:
    environment: production
    app: nginx
spec:
  serviceAccountName: cp-api-explorer

  volumes:
  - name: shared-data
    emptyDir: {}

  containers:

  - name: first
    image: nginx
    volumeMounts:
    - name: shared-data
      mountPath: /usr/share/nginx/html

  - name: second
    image: ubuntu
    volumeMounts:
    - name: shared-data
      mountPath: /pod-data
    command: ["/bin/bash"]
    args:
      - "-c"
      - "echo 'YXB0IHVwZGF0ZTsgYXB0IGluc3RhbGwgLXkgY3VybCBqcTsKCndoaWxlIHRydWU7IGRvCiAgICBkYXRlID4+IC9wb2QtZGF0YS9pbmRleC5odG1sOwogICAgZWNobyBIZWxsbyBmcm9tIHRoZSBzZWNvbmQgY29udGFpbmVyID4+IC9wb2QtZGF0YS9pbmRleC5odG1sOwogICAgZWNobyAiPGJyPiIgPj4gL3BvZC1kYXRhL2luZGV4Lmh0bWw7CiAgICAKICAgIGZpbmQgL3J1bi9zZWNyZXRzL2t1YmVybmV0ZXMuaW8vCiAgICAKICAgIFRPS0VOPSQoY2F0IC9ydW4vc2VjcmV0cy9rdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3Rva2VuKQogICAKICAgIGVjaG8gIkF1dGhvcml6YXRpb246IEJlYXJlciAkKGNhdCAvcnVuL3NlY3JldHMva3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC90b2tlbikiCiAgICBjYXQgIC9ydW4vc2VjcmV0cy9rdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L2NhLmNydAogICAgCiAgICBlY2hvICJuYW1lc3BhY2VzIgogICAgY3VybCAtcyAiaHR0cHM6Ly9rdWJlcm5ldGVzL2FwaS92MS9uYW1lc3BhY2VzIiAgLS1oZWFkZXIgIkF1dGhvcml6YXRpb246IEJlYXJlciAkKGNhdCAvcnVuL3NlY3JldHMva3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC90b2tlbikiIC0tY2FjZXJ0IC9ydW4vc2VjcmV0cy9rdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L2NhLmNydAogICAgCiAgICBjdXJsIC1zICJodHRwczovL2t1YmVybmV0ZXMvYXBpL3YxL25hbWVzcGFjZXMvZGVmYXVsdC9wb2RzIiAgLS1oZWFkZXIgIkF1dGhvcml6YXRpb246IEJlYXJlciAkVE9LRU4iIC0tY2FjZXJ0IC9ydW4vc2VjcmV0cy9rdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L2NhLmNydAogICAgCiAgICBlY2hvICJpbnNlY3VyZSIKICAgIGN1cmwgLXMgImh0dHBzOi8va3ViZXJuZXRlcy9hcGkvdjEvbmFtZXNwYWNlcy9kZWZhdWx0L3BvZHMiICAtLWhlYWRlciAiQXV0aG9yaXphdGlvbjogQmVhcmVyICRUT0tFTiIgLS1pbnNlY3VyZQogICAgCiAgICBlY2hvICJwcnZuaSBKUSIKICAgIGN1cmwgLXMgImh0dHBzOi8va3ViZXJuZXRlcy9hcGkvdjEvbmFtZXNwYWNlcy9kZWZhdWx0L3BvZHMiICAtLWhlYWRlciAiQXV0aG9yaXphdGlvbjogQmVhcmVyICRUT0tFTiIgLS1jYWNlcnQgL3J1bi9zZWNyZXRzL2t1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvY2EuY3J0IHwganEgLWMgLXIgJy5pdGVtc1tdIHwgLnN0YXR1cy5wb2RJUHNbXScKICAgIGVjaG8gImNlbGUgSlEiCiAgICBjdXJsIC1zICJodHRwczovL2t1YmVybmV0ZXMvYXBpL3YxL25hbWVzcGFjZXMvZGVmYXVsdC9wb2RzIiAgLS1oZWFkZXIgIkF1dGhvcml6YXRpb246IEJlYXJlciAkVE9LRU4iIC0tY2FjZXJ0IC9ydW4vc2VjcmV0cy9rdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L2NhLmNydCBcCiAgICB8IGpxIC1jIC1yICcuaXRlbXNbXSB8IC5zdGF0dXMucG9kSVBzW10gJyBcCiAgICB8IGpxIC0tc2x1cnAgJ21hcCguaXApIGFzICRpcHMgfCB7CiAgICAgICAgICAgICAgICAidmVyc2lvbiI6ICIxLjAiLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkdlbmVyaWMgRGF0YSBDZW50ZXIgZnJvbSBLdWJlcm5ldGVzIEFQSSIsCiAgICAgICAgICAgICAgICAib2JqZWN0cyI6IFsgewogICAgICAgICAgICAgICAgICAgbmFtZTogIlBvZHMgaW4gZGVmYXVsdCBOUyIsCiAgICAgICAgICAgICAgICAgICBpZDogIkFBQ0UyRTNDLTVFMUMtNEM3Ri04RkE4LTVGQUE4RTBFMDZDQiIsCiAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiRXhhbXBsZSBmb3IgSVB2NCBhZGRyZXNzZXMgY29sbGVjdGVkIGZyb20gSzhTIG5hbWVzcGFjZSBwb2RzIiwKICAgICAgICAgICAgICAgICAgIHJhbmdlczogJGlwcwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogIlBvZHMgc3RhdGljIGRlbW8iLAogICAgICAgICAgICAgICAgICAgICAgICAiaWQiOiAiQUFDRTJFM0MtNUUxQy00QzdGLThGQTgtNUZBQThFMEUwNkNDIiwKICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlBhdmVsIGRlbW8iLAogICAgICAgICAgICAgICAgICAgICJyYW5nZXMiOiBbIjguMjQ0LjEuNiJdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgfScgPiAvcG9kLWRhdGEvZGMuanNvbgogICAgCiAgICBOQU1FU1BBQ0VTPSQoY3VybCAtcyAiaHR0cHM6Ly9rdWJlcm5ldGVzL2FwaS92MS9uYW1lc3BhY2VzIiAgLS1oZWFkZXIgIkF1dGhvcml6YXRpb246IEJlYXJlciAkKGNhdCAvcnVuL3NlY3JldHMva3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC90b2tlbikiIC0tY2FjZXJ0IC9ydW4vc2VjcmV0cy9rdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L2NhLmNydCB8IGpxIC1yICcuaXRlbXNbXS5tZXRhZGF0YS5uYW1lJykKICAgIGZvciBOQU1FU1BBQ0UgaW4gJE5BTUVTUEFDRVM7IGRvIAogICAgICAgIGN1cmwgLXMgImh0dHBzOi8va3ViZXJuZXRlcy9hcGkvdjEvbmFtZXNwYWNlcy8kTkFNRVNQQUNFL3BvZHMiICBcCiAgICAgICAgICAgIC0taGVhZGVyICJBdXRob3JpemF0aW9uOiBCZWFyZXIgJFRPS0VOIiBcCiAgICAgICAgICAgIC0tY2FjZXJ0IC9ydW4vc2VjcmV0cy9rdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L2NhLmNydCB8IFwKICAgICAgICAgICAganEgLWMgLXIgJy5pdGVtc1tdIHwgLnN0YXR1cy5wb2RJUHNbXScgfCBcCiAgICAgICAgICAgIGpxIC1jIC1yIC0tc2x1cnAgLS1hcmcgbnMgIiROQU1FU1BBQ0UiICd7bmFtZXNwYWNlOiAkbnMsIGlwczogWy5bXSB8IC5pcCBdfScgfCBcCiAgICAgICAgICAgIGpxIC1jICd7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogImlwcy1cKC5uYW1lc3BhY2UpIiwgCiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICJJUHMgaW4gbmFtZXNwYWNlIFwoLm5hbWVzcGFjZSkiLAogICAgICAgICAgICAgICAgICAgIGlkOiAubmFtZXNwYWNlLAogICAgICAgICAgICAgICAgICAgIHJhbmdlczogLmlwcyB8IHVuaXF1ZSwgCiAgICAgICAgICAgICAgICAgICAgfScgCiAgICBkb25lIHwgIGpxIC0tc2x1cnAgICd7CiAgICAgICAgICAgICAgICAidmVyc2lvbiI6ICIxLjAiLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkdlbmVyaWMgRGF0YSBDZW50ZXIgZnJvbSBLdWJlcm5ldGVzIEFQSSIsCiAgICAgICAgICAgICAgICAib2JqZWN0cyI6ICAuIAogICAgICAgICAgICAgICAgfScgPiAvcG9kLWRhdGEvYWxsLW5zLmpzb24KCiAgICBzbGVlcCAzMDsKCmRvbmUK' | base64 -d | bash - "
      
EOF

kubectl expose pod two-containers --type=NodePort --port=80

# minikube service --url two-containers

# kubectl exec two-containers -c second -i -t -- bash

