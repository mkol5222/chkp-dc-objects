#!/bin/bash

# SA to obtain pods
kubectl create serviceaccount cp-api-explorer

kubectl create clusterrole ns-reader --verb=get,list,watch --resource=namespaces,pods
kubectl create clusterrolebinding ns-reader --clusterrole ns-reader --serviceaccount default:cp-api-explorer

# RO access to pods in default ns
cat <<EOF | kubectl apply -f -
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: pod-reader
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["pods"]
  verbs: ["get", "watch", "list"]
EOF

# bind role to SA
# kubectl create rolebinding api-explorer:pod-reader --role pod-reader --serviceaccount default:cp-api-explorer

# if needed to recreate
kubectl delete pod two-containers

cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Pod
metadata:
  name: two-containers
  labels:
    environment: production
    app: nginx
spec:
  serviceAccountName: cp-api-explorer

  volumes:
  - name: shared-data
    emptyDir: {}

  containers:

  - name: first
    image: nginx
    volumeMounts:
    - name: shared-data
      mountPath: /usr/share/nginx/html

  - name: second
    image: ubuntu
    volumeMounts:
    - name: shared-data
      mountPath: /pod-data
    command: ["/bin/bash"]
    args:
      - "-c"
      - "echo 'YXB0IHVwZGF0ZTsgYXB0IGluc3RhbGwgLXkgY3VybCBqcSB1dWlkLXJ1bnRpbWU7Cgp3aGlsZSB0cnVlOyBkbwogICAgZGF0ZSA+PiAvcG9kLWRhdGEvaW5kZXguaHRtbDsKICAgIGVjaG8gSGVsbG8gZnJvbSB0aGUgc2Vjb25kIGNvbnRhaW5lciA+PiAvcG9kLWRhdGEvaW5kZXguaHRtbDsKICAgIGVjaG8gIjxicj4iID4+IC9wb2QtZGF0YS9pbmRleC5odG1sOwogICAgCiAgICBmaW5kIC9ydW4vc2VjcmV0cy9rdWJlcm5ldGVzLmlvLwogICAgCiAgICBUT0tFTj0kKGNhdCAvcnVuL3NlY3JldHMva3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC90b2tlbikKICAgCiAgICBlY2hvICJBdXRob3JpemF0aW9uOiBCZWFyZXIgJChjYXQgL3J1bi9zZWNyZXRzL2t1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvdG9rZW4pIgogICAgY2F0ICAvcnVuL3NlY3JldHMva3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9jYS5jcnQKICAgIAogICAgZWNobyAibmFtZXNwYWNlcyIKICAgIGN1cmwgLXMgImh0dHBzOi8va3ViZXJuZXRlcy9hcGkvdjEvbmFtZXNwYWNlcyIgIC0taGVhZGVyICJBdXRob3JpemF0aW9uOiBCZWFyZXIgJChjYXQgL3J1bi9zZWNyZXRzL2t1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvdG9rZW4pIiAtLWNhY2VydCAvcnVuL3NlY3JldHMva3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9jYS5jcnQKICAgIAogICAgY3VybCAtcyAiaHR0cHM6Ly9rdWJlcm5ldGVzL2FwaS92MS9uYW1lc3BhY2VzL2RlZmF1bHQvcG9kcyIgIC0taGVhZGVyICJBdXRob3JpemF0aW9uOiBCZWFyZXIgJFRPS0VOIiAtLWNhY2VydCAvcnVuL3NlY3JldHMva3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9jYS5jcnQKICAgIAogICAgZWNobyAiaW5zZWN1cmUiCiAgICBjdXJsIC1zICJodHRwczovL2t1YmVybmV0ZXMvYXBpL3YxL25hbWVzcGFjZXMvZGVmYXVsdC9wb2RzIiAgLS1oZWFkZXIgIkF1dGhvcml6YXRpb246IEJlYXJlciAkVE9LRU4iIC0taW5zZWN1cmUKICAgIAogICAgZWNobyAicHJ2bmkgSlEiCiAgICBjdXJsIC1zICJodHRwczovL2t1YmVybmV0ZXMvYXBpL3YxL25hbWVzcGFjZXMvZGVmYXVsdC9wb2RzIiAgLS1oZWFkZXIgIkF1dGhvcml6YXRpb246IEJlYXJlciAkVE9LRU4iIC0tY2FjZXJ0IC9ydW4vc2VjcmV0cy9rdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L2NhLmNydCB8IGpxIC1jIC1yICcuaXRlbXNbXSB8IC5zdGF0dXMucG9kSVBzW10nCiAgICBlY2hvICJjZWxlIEpRIgogICAgY3VybCAtcyAiaHR0cHM6Ly9rdWJlcm5ldGVzL2FwaS92MS9uYW1lc3BhY2VzL2RlZmF1bHQvcG9kcyIgIC0taGVhZGVyICJBdXRob3JpemF0aW9uOiBCZWFyZXIgJFRPS0VOIiAtLWNhY2VydCAvcnVuL3NlY3JldHMva3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9jYS5jcnQgXAogICAgfCBqcSAtYyAtciAnLml0ZW1zW10gfCAuc3RhdHVzLnBvZElQc1tdICcgXAogICAgfCBqcSAtLXNsdXJwICdtYXAoLmlwKSBhcyAkaXBzIHwgewogICAgICAgICAgICAgICAgInZlcnNpb24iOiAiMS4wIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJHZW5lcmljIERhdGEgQ2VudGVyIGZyb20gS3ViZXJuZXRlcyBBUEkiLAogICAgICAgICAgICAgICAgIm9iamVjdHMiOiBbIHsKICAgICAgICAgICAgICAgICAgIG5hbWU6ICJQb2RzIGluIGRlZmF1bHQgTlMiLAogICAgICAgICAgICAgICAgICAgaWQ6ICJBQUNFMkUzQy01RTFDLTRDN0YtOEZBOC01RkFBOEUwRTA2Q0IiLAogICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkV4YW1wbGUgZm9yIElQdjQgYWRkcmVzc2VzIGNvbGxlY3RlZCBmcm9tIEs4UyBuYW1lc3BhY2UgcG9kcyIsCiAgICAgICAgICAgICAgICAgICByYW5nZXM6ICRpcHMKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJQb2RzIHN0YXRpYyBkZW1vIiwKICAgICAgICAgICAgICAgICAgICAgICAgImlkIjogIkFBQ0UyRTNDLTVFMUMtNEM3Ri04RkE4LTVGQUE4RTBFMDZDQyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJQYXZlbCBkZW1vIiwKICAgICAgICAgICAgICAgICAgICAicmFuZ2VzIjogWyI4LjI0NC4xLjYiXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgIH0nID4gL3BvZC1kYXRhL2RjLmpzb24KICAgIAogICAgTkFNRVNQQUNFUz0kKGN1cmwgLXMgImh0dHBzOi8va3ViZXJuZXRlcy9hcGkvdjEvbmFtZXNwYWNlcyIgIC0taGVhZGVyICJBdXRob3JpemF0aW9uOiBCZWFyZXIgJChjYXQgL3J1bi9zZWNyZXRzL2t1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvdG9rZW4pIiAtLWNhY2VydCAvcnVuL3NlY3JldHMva3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9jYS5jcnQgfCBqcSAtciAnLml0ZW1zW10ubWV0YWRhdGEubmFtZScpCiAgICBmb3IgTkFNRVNQQUNFIGluICROQU1FU1BBQ0VTOyBkbyAKICAgICAgICBjdXJsIC1zICJodHRwczovL2t1YmVybmV0ZXMvYXBpL3YxL25hbWVzcGFjZXMvJE5BTUVTUEFDRS9wb2RzIiAgXAogICAgICAgICAgICAtLWhlYWRlciAiQXV0aG9yaXphdGlvbjogQmVhcmVyICRUT0tFTiIgXAogICAgICAgICAgICAtLWNhY2VydCAvcnVuL3NlY3JldHMva3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9jYS5jcnQgfCBcCiAgICAgICAgICAgIGpxIC1jIC1yICcuaXRlbXNbXSB8IC5zdGF0dXMucG9kSVBzW10nIHwgXAogICAgICAgICAgICBqcSAtYyAtciAtLXNsdXJwIC0tYXJnIG5zICIkTkFNRVNQQUNFIiAne25hbWVzcGFjZTogJG5zLCBpcHM6IFsuW10gfCAuaXAgXX0nIHwgXAogICAgICAgICAgICBqcSAtYyAtLWFyZyB1dWlkICIkKHV1aWRnZW4pIiAnewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJpcHMtXCgubmFtZXNwYWNlKSIsIAogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAiSVBzIGluIG5hbWVzcGFjZSBcKC5uYW1lc3BhY2UpIiwKICAgICAgICAgICAgICAgICAgICBpZDogLm5hbWVzcGFjZSwKICAgICAgICAgICAgICAgICAgICB1aWQ6ICR1dWlkLAogICAgICAgICAgICAgICAgICAgIHJhbmdlczogLmlwcyB8IHVuaXF1ZSwgCiAgICAgICAgICAgICAgICAgICAgfScgCiAgICBkb25lIHwgIGpxIC0tc2x1cnAgICd7CiAgICAgICAgICAgICAgICAidmVyc2lvbiI6ICIxLjAiLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkdlbmVyaWMgRGF0YSBDZW50ZXIgZnJvbSBLdWJlcm5ldGVzIEFQSSIsCiAgICAgICAgICAgICAgICAib2JqZWN0cyI6ICAuIAogICAgICAgICAgICAgICAgfScgPiAvcG9kLWRhdGEvYWxsLW5zLmpzb24KCiAgICBzbGVlcCAzMDsKCmRvbmUK' | base64 -d | bash - "
      
EOF

kubectl expose pod two-containers --type=NodePort --port=80

# minikube service --url two-containers

# kubectl exec two-containers -c second -i -t -- bash

